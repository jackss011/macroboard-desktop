apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'cpp'

version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// Java plugin setup
repositories {
    mavenCentral()
}

dependencies {
    compile 'net.java.dev.jna:jna:4.4.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/res']
            exclude '**/*.sass'
        }
        output.resourcesDir 'build/classes/main/macroboard'
    }
}


// Cpp plugin: setup model
model {
    platforms {
        x64 {
            architecture 'x64'
        }
    }

    binaries {
        all {
            if (toolChain in VisualCpp) {
                linker.args 'user32.lib'
            }
        }
    }

    components {
        mbctrls(NativeLibrarySpec) {
            targetPlatform 'x64'

            sources {
                cpp {
                    source {
                        srcDirs 'native'
                        include '**/*.cpp'
                    }
                }
            }
        }
    }
}



// FileCollection of native libraries (dll, do, dylib) which will be included in the packaged app
def nativeLibs = fileTree('build/libs/mbctrls/shared') {
    include '*.dll'
    include '*.so'
    include '*.dylib'
}

// Name of the folder containing the packaged app
def appName = project.name

// Relative path to the folder containing the packaged app
def artifactsOutDir = "build/artifacts/$appName"



// Copy the dll to build/native where it can be found by jna
task moveDll(type: Copy, dependsOn: 'mbctrlsSharedLibrary') {
    group 'app'
    from nativeLibs
    into 'build/native'
}

tasks.findByName('build').dependsOn 'moveDll'


// Create a jar and copy native library in the parent folder
task('package', type: Copy, dependsOn: ['packJar', 'mbctrlsSharedLibrary']) {
    group 'app'
    from nativeLibs
    into "$artifactsOutDir/bin"
}


// Create application jar
task packJar(type: Jar, dependsOn: 'classes') {
    manifest { attributes("Main-Class": "macroboard.Main") }
    from sourceSets.main.output.classesDir    //main source set
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }  //include libraries
    destinationDir file(artifactsOutDir)
}


def final MAIN_SASS_DIR = 'src/res/main.sass'
def final BUILT_CSS_DIR = "${sourceSets.main.output.resourcesDir}/main.css"
def final SASS_OPT = '--sourcemap=none'

// Compile sass
task compileSass(type: Exec) {
    group 'app'
    mustRunAfter 'classes'

    doFirst {
        file(BUILT_CSS_DIR).getParentFile().mkdirs()
    }

    if(System.getProperty("os.name").toLowerCase().contains("windows"))
    {
        commandLine 'cmd', '/c', 'sass', SASS_OPT, MAIN_SASS_DIR, BUILT_CSS_DIR
    }
    else
    {
        executable 'sass'
        args SASS_OPT, MAIN_SASS_DIR, BUILT_CSS_DIR
    }
}
tasks.getByName('build').dependsOn 'compileSass'
tasks.getByName('package').dependsOn 'compileSass'